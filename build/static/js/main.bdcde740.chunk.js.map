{"version":3,"sources":["components/WalletConnected.js","helpers/auth.js","App.js","index.js"],"names":["WalletConnected","gifList","createGifAccount","handleGifSubmit","useState","inputValue","setInputValue","className","onClick","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","map","item","index","src","gifLink","alt","checkIfWalletIsConnected","setWalletAddress","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","SystemProgram","web3","arr","KeyPair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","walletAddress","setGifList","getProvider","connection","Connection","Provider","getGifList","provider","program","Program","account","fetch","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","length","addGif","useEffect","onLoad","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdcde740.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport '../App.css';\n\nconst WalletConnected = ({ gifList, createGifAccount, handleGifSubmit }) => {\n  const [inputValue, setInputValue] = useState('');\n  const onInputChange = (e) => setInputValue(e.target.value);\n\n  if (gifList === null) {\n    return (\n      <div className=\"connected-container\">\n        <button\n          className=\"cta-button submit-gif-button\"\n          onClick={createGifAccount}\n        >\n          Do One-Time Initialization For GIF Program Account\n        </button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"connected-container\">\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            handleGifSubmit(inputValue, setInputValue);\n          }}\n        >\n          <input\n            type=\"text\"\n            placeholder=\"Enter gif link!\"\n            value={inputValue}\n            onChange={onInputChange}\n          />\n          <button type=\"submit\" className=\"cta-button submit-gif-button\">\n            Submit\n          </button>\n        </form>\n        <div className=\"gif-grid\">\n          {gifList.map((item, index) => (\n            <div className=\"gif-item\" key={index}>\n              <img src={item.gifLink} alt={item.gifLink} />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default WalletConnected;\n","// check to  see if a phantom wallet is connected in the user's browser. Phantom injects a 'solana' property (itself an object) into the window object\n// this function checks to see if that prop is present.\nexport const checkIfWalletIsConnected = async (setWalletAddress) => {\n  try {\n    const { solana } = window;\n    if (solana) {\n      // check for phantom wallet on solana object\n      if (solana.isPhantom) {\n        console.log('Phantom Wallet has been found!');\n\n        // solana object provides this in built function to check if the this app is authorised on the users wallet\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log('connected with public key', response.publicKey.toString());\n        setWalletAddress(response.publicKey.toString());\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const connectWallet = async (setWalletAddress) => {\n  const { solana } = window;\n  if (solana) {\n    const response = await solana.connect();\n    console.log('Connected with Public Key:', response.publicKey.toString());\n    setWalletAddress(response.publicKey.toString());\n  }\n};\n","import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey, clusterApiUrl, Keypair } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport './App.css';\nimport idl from './idl.json';\nimport WalletConnected from './components/WalletConnected';\nimport { checkIfWalletIsConnected, connectWallet } from './helpers/auth';\nimport kp from './keypair.json';\n\n// Constants\n\n// reference to the Solana program which handles accounts etc.,\nconst { SystemProgram, KeyPair } = web3;\n\n//use the keypair generated in createKeyPair.js as the account for reading and writing data from/to\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\n\n// grab the solanaprogram id from the IDL file\nconst programID = new PublicKey(idl.metadata.address);\n\n//set the network to devnet\nconst network = clusterApiUrl('devnet');\n\n//options for marking a transaction as complete - soloana gives a variety of options for marking a transaction as complete including how long to wait for it.\n// this option chooses to wait for the connected node to confirm the transaction. A further option would be 'finalized' which waits longer.\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  // const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet button\"\n      onClick={() => connectWallet(setWalletAddress)}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log('retrieved account', account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log('error in getGifList: ', error);\n      setGifList(null);\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log('ping');\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        'Created a new BaseAccount w/ address:',\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error);\n    }\n  };\n\n  const handleGifSubmit = async (inputValue, setInputValue) => {\n    if (inputValue.length === 0) {\n      console.log('no link provided');\n      return;\n    }\n    setInputValue('');\n    console.log('gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log('Gif successfully sent to the program', inputValue);\n      await getGifList();\n    } catch (error) {\n      console.log('Error sending Gif: ', error);\n    }\n  };\n\n  // have this function run on page load\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected(setWalletAddress);\n    };\n    window.addEventListener('load', onLoad);\n    // wait until the page is loaded before running the function (recomended by Phantom)\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list');\n      // call solana program here, this will fetch the data like a axios request\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">The Rick & Mortyverse</p>\n          <p className=\"sub-text\">\n            The Home of Rick & Morty GIFS in the metaverse\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && (\n            <WalletConnected\n              gifList={gifList}\n              createGifAccount={createGifAccount}\n              handleGifSubmit={handleGifSubmit}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}